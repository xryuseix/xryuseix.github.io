{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/pages/news.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","location","posts","allMarkdownRemark","nodes","style","listStyle","map","post","frontmatter","fields","slug","key","className","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"mappings":"yHAYMA,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,GAASC,oBAAe,cAAxBD,KAgBFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAExC,OACE,gBAAC,IAAD,CACEM,eAAgB,CACdR,QAEFE,MAAOA,EACPO,cAAeF,EAAY,QAAWA,EAAiB,KACvDN,KAAM,CACJ,CACES,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAST,GAEX,CACEU,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAST,GAEX,CACEQ,KAAK,sBACLC,QAASN,IAEXU,OAAOd,MAKfH,EAAIkB,aAAe,CACjBhB,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,+FC1CA,UAzCkB,SAAC,GAAwB,IAAtBkB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAQF,EAAKG,kBAAkBC,MACrC,OACE,gBAAC,IAAD,CAAQH,SAAUA,GAChB,gBAAC,IAAD,CAAKhB,MAAM,YAAYH,YAAY,kCACnC,gBAAC,IAAD,CAAMG,MAAM,SACZ,kCACA,iEACA,sBAAIoB,MAAO,CAAEC,UAAU,SACpBJ,EAAMK,KAAI,SAACC,GACV,IAAMvB,EAAQuB,EAAKC,YAAYxB,OAASuB,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BAASE,UAAU,iBAAiBC,WAAS,EAACC,SAAS,6BACrD,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIT,EAAKE,OAAOC,KAAMO,SAAS,OACnC,wBAAMA,SAAS,YAAYjC,KAG/B,6BAAQuB,EAAKC,YAAYU,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQb,EAAKC,YAAY3B,aAAe0B,EAAKc,SAE/CJ,SAAS,iBAGb","file":"component---src-pages-news-js-cbf9f886904df3170ff5.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Meta from '../components/meta'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nconst BlogIndex = ({ data, location }) => {\n  const posts = data.allMarkdownRemark.nodes\n  return (\n    <Layout location={location}>\n      <SEO title=\"All posts\" description=\"このホームページの最新情報や最近の活動について記述します．\" />\n      <Meta title=\"news\" />\n      <h1>News</h1>\n      <p>このページの新機能やブログの投稿，ちょっとしたニュースをここに記載します</p>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map((post) => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n                <hr />\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}