{"version":3,"file":"component---src-pages-apps-color-tsx-69f93940d1765ca5d37a.js","mappings":"qJAeMA,EAAqB,CACzB,CAAEC,KAAM,IAAKC,KAAM,SACnB,CAAED,KAAM,IAAKC,KAAM,SACnB,CAAED,KAAM,IAAKC,KAAM,OACnB,CAAED,KAAM,IAAKC,KAAM,WAsBfC,EAAAA,SAAAA,GACJ,WAAYC,GAAwD,IAAD,kBAAvDA,IAAAA,EAAoB,CAAEC,MAAM,EAAOC,QAAS,WACtD,cAAMF,IAAN,MACKG,MAAQ,CACXF,KAAMD,EAAMC,KACZC,QAASF,EAAME,SAJgD,GAD/DH,EAAAA,EAAAA,GAAAA,EAAAA,GAWD,IAAL,cAwDG,OAxDH,EACEK,eAAA,WACE,GAAIC,KAAKF,MAAMF,KAAM,CACnB,IAAMK,EAAqBC,OAAOD,SAE9BA,EAASF,gBACXE,EAASF,iBAEXC,KAAKG,SAAS,CAAEP,MAAM,EAAOC,QAAS,UACtC,IAAMO,EAA2BH,EAASI,cAAc,eAC5C,MAARD,IACFA,EAAKE,MAAMC,gBAAkB,WAMrC,EACEC,cAAA,WACER,KAAKD,kBACN,EACDU,kBAAA,WACEP,OAAOQ,iBAAiB,UAAWV,KAAKQ,cAAcG,KAAKX,QAK/D,EACEY,sBAAA,SAAsBC,GACpB,IACMT,EADqBF,OAAOD,SACQI,cAAc,eAC5C,MAARD,IACFA,EAAKE,MAAMC,gBAAkBM,EAEzBT,EAAKU,mBACPV,EAAKU,qBAGTd,KAAKG,SAAS,CAAEP,MAAM,EAAMC,QAAS,UACtC,EAEDkB,OAAA,WAAU,IAAD,OACP,OACE,uBAAKC,UAAU,cACb,uBAAKV,MAAO,CAAET,QAASG,KAAKF,MAAMD,UAC/BN,EAAO0B,KAAI,SAACC,GAAD,OACV,0BACEZ,MAAO,CAAEC,gBAAiBW,EAAUzB,MACpC0B,QAAS,kBAAM,EAAKP,sBAAsBM,EAAUzB,QAEnDyB,EAAU1B,YAMtB,EAnEGE,CAAwB0B,EAAAA,WAmF9B,UATkD,SAACzB,GACjD,OACE,gBAAC,IAAD,CAAQ0B,SAAU1B,EAAM0B,UACtB,gBAAC,IAAD,CAAKC,MAAM,SAASC,YAAY,WAChC,gBAAC,IAAD,CAAMD,MAAM,WACZ,gBAAC5B,EAAD","sources":["webpack:///./src/pages/apps/color.tsx"],"sourcesContent":["import React from 'react'\n\nimport Layout from '../../components/layout'\nimport Meta from '../../components/meta'\nimport Seo from '../../components/seo'\n\nimport './color.css'\n\ninterface ColorType {\n  name: string\n  code: string\n}\n\ntype ColorsType = ColorType[]\n\nconst Colors: ColorsType = [\n  { name: '黒', code: 'black' },\n  { name: '白', code: 'white' },\n  { name: '赤', code: 'red' },\n  { name: '黄', code: 'yellow' }\n]\n\n/*\n * 背景色の切り替えを行う\n */\ninterface StateProps {\n  full: boolean\n  display: 'block' | 'none'\n}\n\ninterface Document {\n  exitFullscreen?: () => void\n  querySelector: (selector: string) => HTMLElement | null\n}\n\ninterface HTMLElement {\n  style: React.CSSProperties\n  requestFullscreen?: () => void\n  querySelector: (selector: string) => HTMLElement | null\n}\n\nclass ColorsSwitching extends React.Component<StateProps | {}, StateProps> {\n  constructor(props: StateProps = { full: false, display: 'block' }) {\n    super(props)\n    this.state = {\n      full: props.full,\n      display: props.display\n    }\n  }\n\n  /*\n   * キーが押された時の処理\n   */\n  exitFullscreen(): void {\n    if (this.state.full) {\n      const document: Document = window.document\n      // フルスクリーン元に戻す\n      if (document.exitFullscreen) {\n        document.exitFullscreen()\n      }\n      this.setState({ full: false, display: 'block' })\n      const elem: HTMLElement | null = document.querySelector('.color_body')\n      if (elem != null) {\n        elem.style.backgroundColor = 'white'\n      }\n    }\n  }\n  /*\n   * キーが押された時のイベントハンドラ\n   */\n  handleKeyDown(): void {\n    this.exitFullscreen()\n  }\n  componentDidMount(): void {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this))\n  }\n\n  /*\n   * 背景色を変更\n   */\n  changeBackGrountColor(colorCode: string): void {\n    const document: Document = window.document\n    const elem: HTMLElement | null = document.querySelector('.color_body')\n    if (elem != null) {\n      elem.style.backgroundColor = colorCode\n      // フルスクリーンにする\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen()\n      }\n    }\n    this.setState({ full: true, display: 'none' })\n  }\n\n  render() {\n    return (\n      <div className=\"color_body\">\n        <div style={{ display: this.state.display }}>\n          {Colors.map((colorData) => (\n            <button\n              style={{ backgroundColor: colorData.code }}\n              onClick={() => this.changeBackGrountColor(colorData.code)}\n            >\n              {colorData.name}\n            </button>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\ninterface ColorPageProps {\n  location: Location\n}\n\nconst ColorPageIndex: React.VFC<ColorPageProps> = (props: ColorPageProps) => {\n  return (\n    <Layout location={props.location}>\n      <Seo title=\"Colors\" description=\"Colors\" />\n      <Meta title=\"Colors\" />\n      <ColorsSwitching />\n    </Layout>\n  )\n}\nexport default ColorPageIndex\n"],"names":["Colors","name","code","ColorsSwitching","props","full","display","state","exitFullscreen","this","document","window","setState","elem","querySelector","style","backgroundColor","handleKeyDown","componentDidMount","addEventListener","bind","changeBackGrountColor","colorCode","requestFullscreen","render","className","map","colorData","onClick","React","location","title","description"],"sourceRoot":""}