{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","location","post","markdownRemark","siteTitle","previous","next","frontmatter","className","itemScope","itemType","dangerouslySetInnerHTML","__html","html","itemProp","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"mappings":"2HAYMA,EAAM,SAAC,GAA+C,IAAD,MAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACrCC,GAASC,oBAAe,cAAxBD,KAgBFE,EAAkBP,GAAeK,EAAKG,aAAaR,YACnDS,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBL,MAGxC,OACE,gBAAC,IAAD,CACEO,eAAgB,CACdT,QAEFE,MAAOA,EACPQ,cAAeF,EAAY,QAAWA,EAAiB,KACvDP,KAAM,CACJ,CACEU,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASV,GAEX,CACEW,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASV,GAEX,CACES,KAAK,sBACLC,QAASN,GAEX,CACEO,SAAU,WACVD,QAAST,GA5CI,4FA8Cfa,OAAOf,MAKfH,EAAImB,aAAe,CACjBjB,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,+FC9CA,UA1CyB,SAAC,GAAwB,IAAD,EAArBmB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKd,KAAKG,oBAAV,eAAwBL,QAAxB,QACVqB,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KAElB,OACE,gBAAC,IAAD,CAAQL,SAAUA,EAAUjB,MAAOoB,GACjC,gBAAC,IAAD,CAAKpB,MAAOkB,EAAKK,YAAYvB,QAC7B,gBAAC,IAAD,CAAMA,MAAM,SACZ,2BAASwB,UAAU,YAAYC,WAAS,EAACC,SAAS,6BAChD,2BAASC,wBAAyB,CAAEC,OAAQV,EAAKW,MAAQC,SAAS,iBAEpE,uBAAKN,UAAU,iBACb,sBACEO,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAgB,KAAD,CAAMC,GAAIjB,EAASkB,OAAOC,KAAMC,IAAI,QAApC,KACKpB,EAASE,YAAYvB,QAI9B,0BACGsB,GACC,gBAAC,EAAAe,KAAD,CAAMC,GAAIhB,EAAKiB,OAAOC,KAAMC,IAAI,QAC7BnB,EAAKC,YAAYvB,MADpB","file":"component---src-templates-blog-post-js-175e2689c830b0d2c628.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title, image }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  const defaultImage = 'https://raw.githubusercontent.com/xryuseix/xryuseix.github.io/master/images/toppage.png'\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        },\n        {\n          property: 'og:image',\n          content: image || defaultImage\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Meta from '../components/meta'\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={post.frontmatter.title} />\n      <Meta title=\"news\" />\n      <article className=\"blog-post\" itemScope itemType=\"http://schema.org/Article\">\n        <section dangerouslySetInnerHTML={{ __html: post.html }} itemProp=\"articleBody\" />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($id: String!, $previousPostId: String, $nextPostId: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}