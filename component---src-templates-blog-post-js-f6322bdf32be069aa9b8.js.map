{"version":3,"sources":["webpack:///./src/components/meta.js","webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["props","title","lang","name","content","charset","SEO","description","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","property","social","twitter","concat","defaultProps","BlogPostTemplate","data","location","post","markdownRemark","siteTitle","previous","next","frontmatter","className","itemScope","itemType","dangerouslySetInnerHTML","__html","html","itemProp","style","display","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel"],"mappings":"4FAAA,qCAGe,aAACA,GACd,IAAMC,EAAK,GAAMD,EAAMC,MAGvB,OACE,kBAAC,IAAD,KACE,0BAAMC,KAAK,OACX,+BAAQD,GACR,0BAAME,KAAK,cAAcC,QAL3B,gQAME,0BAAMC,QAAQ,a,kCCZpB,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaL,EAAwB,EAAxBA,KAAMM,EAAkB,EAAlBA,KAAMP,EAAY,EAAZA,MAC9BQ,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBX,MAExC,OACE,kBAAC,IAAD,CACEa,eAAgB,CACdZ,QAEFD,MAAOA,EACPc,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEL,KAAK,cACLC,QAASO,GAEX,CACEK,SAAS,WACTZ,QAASH,GAEX,CACEe,SAAS,iBACTZ,QAASO,GAEX,CACEK,SAAS,UACTZ,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAK,EAAKG,oBAAL,mBAAmBK,cAAnB,eAA2BC,UAA3B,IAEX,CACEf,KAAK,gBACLC,QAASH,GAEX,CACEE,KAAK,sBACLC,QAASO,IAEXQ,OAAOX,MAKfF,EAAIc,aAAe,CACjBlB,KAAK,KACLM,KAAM,GACND,YAAY,IAUCD,O,kCC1Ff,gFAiDee,UA1CU,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKb,KAAKG,oBAAV,eAAwBX,QAAxB,QACV0B,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KAElB,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUtB,MAAOyB,GACjC,kBAAC,IAAD,CAAKzB,MAAOuB,EAAKK,YAAY5B,QAC7B,kBAAC,IAAD,CAAMA,MAAM,SACZ,6BAAS6B,UAAU,YAAYC,WAAS,EAACC,SAAS,6BAChD,6BAASC,wBAAyB,CAAEC,OAAQV,EAAKW,MAAQC,SAAS,iBAEpE,yBAAKN,UAAU,iBACb,wBACEO,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGf,GACC,kBAAC,OAAD,CAAMgB,GAAIhB,EAASiB,OAAOC,KAAMC,IAAI,QAApC,KACKnB,EAASE,YAAY5B,QAI9B,4BACG2B,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAAKgB,OAAOC,KAAMC,IAAI,QAC7BlB,EAAKC,YAAY5B,MADpB","file":"component---src-templates-blog-post-js-f6322bdf32be069aa9b8.js","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport default (props) => {\n  const title = `${props.title}`\n  const description =\n    'xryuseixのWebページです．ここからはTwitterのbioから引用 -> Rits Security Network(入学: &#39;19) / SecHack365&#39;20(研究駆動) / seccamp&#39;19 / RiPPro(&#39;20団体長) / RiST(&#39;20副団体長) / AtCoder(cyan) / CodeForces(blue) / paiza, Inc. 学習事業部アルバイト / 競技プログラミングやセキュリティの分野を勉強しています．'\n  return (\n    <Helmet>\n      <html lang=\"ja\" />\n      <title>{title}</title>\n      <meta name=\"Description\" content={description} />\n      <meta charset=\"UTF-8\" />\n    </Helmet>\n  )\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Meta from '../components/meta'\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={post.frontmatter.title} />\n      <Meta title=\"news\" />\n      <article className=\"blog-post\" itemScope itemType=\"http://schema.org/Article\">\n        <section dangerouslySetInnerHTML={{ __html: post.html }} itemProp=\"articleBody\" />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($id: String!, $previousPostId: String, $nextPostId: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}